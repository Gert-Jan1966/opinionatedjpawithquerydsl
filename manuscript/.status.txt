{frontmatter}

-# Status of the book

Where am I with the book and what are my plans? (All is subject to change, of course.)

To actually finish something, I want to do this in the 1st edition:

* Preface (90%) - to explain why this book even exists and some background
* JPA Good Times, Bad Times
    * Good Parts (100%) NEEDS REVIEW
    * Missing Parts (100%) NEEDS REVIEW
    * Questionable Parts (100%) NEEDS REVIEW
* Opinionated JPA
    * ORM tuned down (80%) REVISE COMPLETELY
    * No further steps without Querydsl (40%)
    * Troubles with *to-one* relationships (80%)
        * https://virgo47.wordpress.com/2015/01/30/jpa-joins-without-mapped-attributes/ (JPA 2.1 supports ON, not before)
    * Removing `@ManyToOne` altogether (not JPA compliant) (40%)
    * Modularity, if you must
        * https://virgo47.wordpress.com/2015/05/05/jpa-modularity-denied/
    * Transaction boundary and lazy load (be explicit, I cannot stress it enough)
        * https://dzone.com/articles/opensessioninview-antipattern (OSIV anti-pattern)
* Common Problems

%%    * Object identity, easy problem, recommended always the same way
%%        * Composite `@Id` or `@IdClass`?
%%        * Equals object or id? TODO - does it matter? tests with popular ORMs
%%    * *Many-to-many* relations mapping consequences, what SQL it generates, explicit/implicit mapping

    * Pagination with *to-many* (0%) -- how to paginate when *to-many* is just in where clause and how to
    do it when you need to fetch from *to-many* as well (famous N+1 select problem)
        * https://virgo47.wordpress.com/2014/09/29/jpa-pagination-of-entities-with-onetomanymanytomany/

%%    * Injecting EMF for better control (integration/standalone scenarios, not typical for webapps/simple services)
%%        * Always try to keep create/close in one try/finally block
%%        * Multiple transactions ("system/infrastructure" around business)
%%    * Embeddable limitations (0%)
%% cascade: https://vladmihalcea.com/2015/03/05/a-beginners-guide-to-jpa-and-hibernate-cascade-types/

    * Advanced Querydsl (15%)
* Appendices
    * H2 Database (50%)
    * Bugs I experienced myself (80%)
    * How to report JPA provider bugs? (be active, report, vote, creating test cases, ...)

%%    * Groovy scrips for database initialization

Other ideas, maybe for next editions:

* filtering/pagination
You may be interested in presented filtering/pagination "framework" too and while it is utilized
with the JPA back-end in our case, the concept is rather generic. Sometimes I feel like reinventing
this part for every project I've made.
* DAO vs Repository vs...?
* http://stackoverflow.com/questions/23625885/does-querydsl-suffers-of-the-same-limitations-as-jpa-criteria-api
`JPASQLQuery`? How does it use JPA mapping?

Mention Make the Magic go away: https://blog.8thlight.com/uncle-bob/2015/08/06/let-the-magic-die.html

Investigate more about Entity Graphs:
http://www.thoughts-on-java.org/jpa-21-entity-graph-part-1-named-entity/
http://www.thoughts-on-java.org/jpa-21-entity-graph-part-2-define/
Also projpa2, p.321

However, I doubt this tackles the problem of inherently eager *to-one* mappings.