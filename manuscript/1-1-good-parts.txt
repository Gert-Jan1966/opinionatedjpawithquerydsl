# Good Parts

First we will look at all the goodies JPA offers to us. Why did I started to prefer JPA over
a particular provider?

## JPA is standard

Historically, I was kinda Hibernate guy. There were not many other ORM options for Java, or
at least they were not both high-profile and free. Yet even Hibernate creators are now glad
when their tool is used via JPA interfaces:

{icon=quote-right}
G> "We encourage people to use the EntityManager," said [Emmanuel] Bernard, demonstrating no
G> romantic fondness for the objects and methods that are unique to the Hibernate
G> implementation.[^hibjpa]

[^hibjpa]: http://www.theserverside.com/news/2240186700/The-JPA-20-EntityManager-vs-the-Hibernate-Session-Which-one-to-use

## Better type support

### Convenient type conversion

## Unit of work

## Declarative transactions

OK, this is not JPA, but part of Java Transaction API (JTA) -- but these are so well integrated
that we simply take `@Transactional` support for granted. And in most cases this is good, it
simplifies our code and makes it more declarative.

TODO Spring `@Transactional`