{frontmatter}

-# Preface

This is a book about my experience with [object-relational mapping](https://en.wikipedia.org/wiki/Object-relational_mapping)
in general and the [Java Persistence API](https://en.wikipedia.org/wiki/Java_Persistence_API) (JPA)
specifically. It's a book about [Querydsl](http://www.querydsl.com/) as well, because since I was
recommended this library I completely fell in love with it. It never let me down and sometimes
even generated feeling of sheer happiness -- which is not that common in our programming profession.

Be warned -- this book is (as the title suggests) very opinionated. Sometimes you may even ask:
"Why the hell this guy even uses JPA?!" Sometimes even I don't know. And sometimes you can hear
a feeble voice saying words like "legacy" or similar.


## My writing background

Once I wrote a book. I was 17 or so and it wasn't a technical book. But I managed to finished it
and I'm really proud of it, because that is something I often am not able to do now. I wanted
to write a book about a simple monitoring library for Java called
[Java Simon](https://github.com/virgo47/javasimon) -- nothing big, but books are often easier to
read than manuals... but you can guess I haven't finished that up (even though it wouldn't be
that big).

With 50% success rate (0% for Java related books) I'll try my luck again. This time about JPA
which is the standard API for ORM in the Java world with implementations (also called *JPA
providers*) like [Hibernate](https://en.wikipedia.org/wiki/Hibernate_%28framework%29) or
[EclipseLink](https://en.wikipedia.org/wiki/EclipseLink).

On the bright side -- I wrote more than a few posts on [my blog](http://virgo47.wordpress.com/),
mostly on technical topics, couple of them about JPA. Actually, this book is based on these
frustrated experiences.


## Is this book for you?

If you're not a programmer, well... it's not. If you don't use Java and JPA (or concrete ORM
solution like those mentioned above), probably not. If you're happy with JPA as it is,
probably still not -- although you can give it a try. So who is this book for?

Best fit is when you want to use JPA (obviously), but don't like some of it's problems.
*Criteria API* could have been better, right? Little control over to-one relationships,
because lazy isn't guaranteed there. And there's more -- but I'll focus on these biggest pain
points in the first iteration of the book.

Some parts of the book are more generic and based on common sense (like "avoid N+1 select"),
others are strictly JPA related (like how to achieve modularity). Some are probably complete
answers, others open topics that may raise further questions.


## Not in the book

This is not an introductory book about JPA, see the next section about other JPA related books.
I expect you know ORM and JPA at least superficially, you work with it for whatever reason
(or will, or want to) and you are interested in something beyond reference material. It does not
mean it is difficult book though, as I always try to talk about some concrete problem related
to JPA or SQL (you should know that one too, of course) which makes the explanation easier to
grasp.

This is not a book focusing on architecture, although patterns how to use JPA are
somewhere in this area. I take kind of "Fowlerish" liberty of mixing design and architecture
and blur the line between them. I admit I have not yet worked on such a project where thinking
architecturally big would pay off and while I have seen architecture effort on many, often this
effort was wasted for other reasons you may guess if you're interested in an agile or lean software
development.


## Other JPA books

JPA came with EJB 3, actually first as a part of JSR 220 "Enterprise JavaBeans 3.0", but it soon
proved as a worthy API on its own because it is not tied to EJP in particular. In those days I'd
recommend [Pro EJB 3: Java Persistence API](http://www.amazon.com/dp/1590596455), but I think the
book is now dead (and yes, in 2016 it celebrates its 10^th^ anniversary).

I can highly recommend [Pro JPA 2](http://www.amazon.com/dp/1430249269) in its 2^nd^ Edition,
which is updated to JPA 2.1 (in line with *Java EE 7*). There is hardly anything I haven't found
in this one. Sure, it's closing to 500 pages, but it's structured well. It has minimal overlap with
the rest of Java EE in *Chapter 3: Enterprise Applications*, but even that may be useful.



## History -- or Enterprise Architecture Patterns then and now

