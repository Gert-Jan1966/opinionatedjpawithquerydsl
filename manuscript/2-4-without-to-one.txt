# Removing *to-one* altogether {#ch-without-to-one}

W> This solution builds on JPA 2.1 `ON` clause but is not JPA compliant because it also uses
W> root entity after `JOIN` keyword that is only supported in EclipseLink and not according to
W> [[JPspec](#bib-jpspec)]. Specification details this on page 176 and the following sections
W> 4.4.5.x. I discovered this option when I played with Querydsl
W> and various options how to state my joins -- and it worked on the reference implementation!
W> With this I was more than a year in a mistake that we're bending JPA, using it as it was not
W> intended, but still within the rules. I hit the wall when I tried it with Hibernate in course
W> of writing this book. Checking with the specification I realized I ran into serious troubles
W> and got caught by the irony of me saying "JPA is hard and complex".
W>
W> Sure there is "nobody's fault but mine" part to it. I experimented trying to fight JPA. I tried
W> to get us from the quagmire of that ORM Vietnam and got us into another quagmire, still in ORM
W> war, obviously -- but now out of specification fences. There is no real problem for us as we
W> cannot switch to Hibernate with the project easily anyway (for Hibernate real bugs for a
W> change), but when using ORM on Java I always voted for JPA way (well, since *JPA 2.0* at least).
W>
W> Anyway, the solution -- or a pattern if you will -- is still interesting enough for me to
W> present. I'd just be more happy if the option for joining root entities was in the
W> specification. To that end I also filed [an issue](https://java.net/jira/browse/JPA_SPEC-128),
W> although the recent (non-)activity on that Jira project lets me wonder where all the JPA
W> developers/specifiers are.

To get full control over the fetching -- and to do it without any high-tech solution -- we have to
drop the relation and map row foreign key instead. Before we go on, we will discuss the important
addition of the `ON` keyword in *JPA 2.1*.


## Why do we need `ON` anyway?

`ON` was dearly missing for other practical reasons. While this does not relate to to-one mapping,
let's see an example:

![Class diagram of our entity model for 'ON' demo](images/on-clause-example.png)

Here the `Breed` does not have a name, only some synthetic code, and names are offered in multiple
languages thanks to `BreedLocalizedName`. Demo code is
[here](https://github.com/virgo47/opinionatedjpawithquerydsl/blob/master/examples/on-with-to-many/src/test/java/OnDemonstration.java).
Our favourite breeds are:

* wolf, with code `WLF` and localized names for English and Slovak (*wolf* and *vlk* respectively),
* collie, with code `COL` with localized name available only for Slovak (k√≥lia).

Now imagine we want to get list of all breeds with English names. If the localized name is not
available for our requested language, we still want to see the breed with its code in the list in
any case. This may seem ridiculous to SQL guys, but it's a real problem for some Java programmers.
The first naive attempt may be:

{title="Naive `JOIN` to localized names", lang=java}
~~~
QBreedLocalizedName qbn = QBreedLocalizedName.breedLocalizedName;
List<Tuple> breedEnNames = new JPAQuery<Breed>(em)
  .select(QBreed.breed.id, QBreed.breed.code, qbn.name)
  .from(QBreed.breed)
  .join(QBreed.breed.names, qbn)
  .where(qbn.language.eq("en"))
  .fetch();
~~~

But this produces unsatisfiable results containing only `[1, WLF, wolf]`. "When I join the
localized names to the breed list some results are gone!" our programmer complains. Ok, let's
introduce the `LEFT JOIN` concept to them. Next attempt:

{title="`LEFT JOIN` without `ON` clause", lang=java}
~~~
breedEnNames = new JPAQuery<Breed>(em)
  .select(QBreed.breed.id, QBreed.breed.code, qbn.name)
  .from(QBreed.breed)
  .leftJoin(QBreed.breed.names, qbn)
  .where(qbn.language.eq("en"))
  .fetch();
~~~

It seems promising at first, but the result is again only a single lone wolf. There is one
difference though, although the `WHERE` clause wipes it out. If there was any breed without any
localized name at all it would be preserved after the `JOIN`. `WHERE` eliminates it only because
the value for `language` column would be NULL and not "en". We could try to overcome it by an
additional `.or(qbn.language.isNull())` in the `WHERE` part, but this would work only for rows
with no localized name -- but not for those who have missing "en" localizations.

The trick is that the condition must be part of the `LEFT JOIN` -- and that's what `ON` is all
about. Let's do it right after all:

{title="`LEFT JOIN` with `ON` clause", lang=java}
~~~
breedEnNames = new JPAQuery<Breed>(em)
  .select(QBreed.breed.id, QBreed.breed.code, qbn.name)
  .from(QBreed.breed)
  .leftJoin(QBreed.breed.names, qbn).on(qbn.language.eq("en"))
  .fetch();
~~~

And, voila, the result is `[1, WLF, wolf], [2, COL, null]` -- with collie as well, although
without the name localized to English. Now we could add `.where(qbr.name.isNull())` to filter
these cases and report them, for instance.

But this is the essence of `ON`. It's a special `WHERE` that works very closely with related
`JOIN` and while the difference is virtually none for inner joins, it is essential for those outer
ones.

D> When you use `LEFT JOIN` in JPQL you actually imply SQL `ON` clause undercover with JPA before
D> version 2.1 as well. When you LEFT JOIN `breed.names` to `breed`, JPA determines the content
D> for underlying SQL `ON` clause from the mapping -- naturally it is that the primary key from one
D> table equals the foreign key of the other. This works fine if you follow to-one relations and
D> join optional relations to existing rows.
D>
D> The situations changes dramatically if you follow to-many relations and want to select a
D> concrete one for each row with particular conditions (like a language in our example). This left
D> you in the dark with previous JPA versions. That's why the addition of `ON` is so important for
D> these cases.


## Dropping to-one annotations

TODO


## Loosing information without mapping annotations

TODO custom @References annotation

http://stackoverflow.com/questions/18746259/lazy-loading-does-not-works-for-manytoone-in-eclipselink
http://stackoverflow.com/questions/9400930/using-ecliplselink-jpa-how-can-i-disable-all-the-relationship-lookups-when-persi

options for avoiding eager fetch:
- state all the columns except for relations (tedious)
