{frontmatter}

-# Preface

This is a book about my experience with [object-relational mapping](https://en.wikipedia.org/wiki/Object-relational_mapping)
in general and the [Java Persistence API](https://en.wikipedia.org/wiki/Java_Persistence_API) (JPA)
specifically. It's a book about [Querydsl](http://www.querydsl.com/) as well, because since I was
recommended this library I completely fell in love with it. It never let me down and sometimes
even generated feeling of sheer happiness -- which is not that common in our programming profession.

Be warned -- this book is (as the title suggests) very opinionated. Sometimes you may even ask:
"Why the hell this guy even uses JPA?!" Sometimes even I don't know. And sometimes you can hear
a feeble voice saying words like "legacy" or similar. It is not a typical tutorial book covering
the technology (or part of it) systematically -- I cherry-pick instead. It's not best practices
book either -- and while we use JPA as specified (unless we make a mistake which is not difficult
with JPA) we definitely don't use it as intended.

We decided to take control over the [SQL](https://en.wikipedia.org/wiki/SQL) statements our
system produces. You can't rely much on lazy or eager fetch types, because often (as the
specification says) these are mere hints, not real promises. We decided to use SQL-like style
with JPA because it still provides big benefits over plain
[JDBC](https://en.wikipedia.org/wiki/Java_Database_Connectivity). We tuned down the ORM part of
the JPA a little bit and mapped our entities to resemble "raw" tables more. You may feel like
shouting "that's all wrong!" -- which is OK. Let me answer the following question first...


## Is this book for you?

This book is for anyone who actively uses JPA -- preferably in version 2.1 (*Java EE 7*) --
and is not completely happy with it. Primarily it tackles some difficult JPA points, features
that combine benefits with unavoidable drawbacks. Even if you're happy with JPA as it is, the book
still can give you more options how to solve your problems.

Some of the considerations are related to ORM in general and may be applicable for non-JPA ORM
providers, but I can't guarantee that. Some parts of the book are more generic and based on common
sense (like "avoid N+1 select"), others are strictly JPA related (like how to achieve modularity).
Some are probably complete answers, recipes even, others are open topics that only raise further
questions. Some are definitely a bit unorthodox from typical JPA perspective.

While many parts of the book are usable with *JPA 2.0*, it was the update of the specification to
*JPA 2.1* that really allowed me to experiment with getting rid of my biggest pain point in the JPA
mapping -- which were *to-one* relations that are inherently eager unless you use some non-standard
magic (probably based on bytecode modification). JPA 2.1 introduces ability to explicitly state
`ON` conditions for joins and this, in my eyes, is a true killer feature of this specification
update and bit of a hidden gem overshadowed by (also very useful) converters, procedure calls, etc.


## Not in the book

This is not an introductory book about JPA, see the next section about other JPA related books.
I expect you know ORM and JPA at least superficially, you work with it for whatever reason (or
will, or want to) and you are interested in something beyond reference material. It does not mean
this is a difficult book though, as I always try to talk about some concrete problem related to
JPA or SQL (you should know that one too, of course) which makes the explanation easier to grasp.

This is not a book focusing on architecture, at least not primarily, although patterns how to use
JPA are somewhere in this area. I take kind of "Fowlerish" liberty of mixing design and architecture
and blur the line between them. I admit I have not yet worked on such a project where thinking
architecturally big would pay off. But I have seen architecture effort on other projects where the
effort was wasted for various reasons. Some of them you may guess if you're interested in an agile
or lean software development. That said, I'll talk about some design considerations, especially
around the contract between presentation and session layer. I'll talk about infamous *open session
in view* pattern as well.

This book also does not cover:

* JPA native SQL -- I don't use it massively and I have nothing much to say about it.
* Calling stored procedures -- it works as expected.
* Criteria API -- because I prefer Querydsl instead.


## Other JPA books

JPA came with EJB 3, actually first as a part of JSR 220 "Enterprise JavaBeans 3.0", but it soon
proved as a worthy API on its own because it is not tied to EJP in particular. In those days I'd
recommend [Pro EJB 3: Java Persistence API](http://www.amazon.com/dp/1590596455), but I think the
book is now dead (and yes, in 2016 it celebrates its 10^th^ anniversary).

I can highly recommend [Pro JPA 2](http://www.amazon.com/dp/1430249269)
in its 2^nd^ Edition ([PJPA2](#bib-projpa2)),
which is updated to JPA 2.1 (in line with *Java EE 7*). There is hardly anything I haven't found
in this one. Sure, it's closing to 500 pages, but it's structured well. It has minimal overlap with
the rest of Java EE in *Chapter 3: Enterprise Applications*, but even that may be useful. This
is currently my go-to book when I need to refresh some area.

And then there is [Spring Data](http://www.amazon.com/dp/1449323952) book ([SData](#bib-sdata)).
For the sake of confusion there are actually two books of this name -- one published by O'Reilly
and the other one by Packt, both published within a month late in 2012. If you are Spring positive,
I can only recommend reading at least first 50 pages of the one by O'Reilly (up to chapter 4
including), even if you don't use Spring Data after all. It's a nice quick overview of JPA and
Querydsl with examples of Spring configuration both in XML and Java and they even mention
kind of advanced things like `orphanRemoval` (although rather in passing). It's definitely little
time well spent anyway. I don't know the Packt one, but it seems to be a short book focusing
on similar topics like the first half of O'Reilly book.

I don't know any more relevant books, but there is one more obvious resource -- [Java Persistence
2.1 Specification](http://download.oracle.com/otndocs/jcp/persistence-2_1-fr-spec/index.html)
itself. There are things you hardly find anywhere else, especially when it comes to corner cases
like "use of DISTINCT with COUNT is not supported for arguments of embeddable types". So when you
encounter a problem it is good to search through the specification for keywords. Often JPA
provider works as specified, even when it does not make sense to us.

There are tons of blog posts, of course, some of them are very influential. I will mention the
most important ones (from my perspective anyway) in chapter [Tuning ORM down](#ch-tuning-orm-down).


## Looking back to *Patterns of Enterprise Application Architecture*

Martin Fowler wrote his *Patterns of Enterprise Application Architecture* ([PoEAA](#bib-poeaa))
in 2002 trying to capture various patterns that were occurring in enterprise applications,
written not only in Java. Many patterns in the book cover data access layer and many of those
are clearly ORM related -- starting with *Data Mapper* going through *Unit of Work* or *Lazy Load*
to many more related to concrete mapping problems.

Reading the material so old also gives you the idea how well the patterns stand the test of time.
In 2002 Java was 7 years old, now it's over 20. There were no annotations and dependency injection
was known in theory, but there was no wide-spread container supporting it (mind you, Spring 1.0 was
released in 2004). Years later we still used various `SessionHelper` static classes to work with
Hibernate `Session` in thread-local manner, often forgetting to close session because we were not
able to clearly put open and close to a single method with try/finally block. That was before we
read books like *Clean Code*... probably because it was before they were written.

Closing his chapter *Mapping to Relation Databases* Martin Fowler wrote:

{icon=quote-right}
G> Object-relational mapping is a fact of life for most people, so it’s no surprise
G> that there’s been a lot written on the subject. The surprise is that there isn’t a
G> single coherent, complete, and up-to-date book, which is why I’ve devoted so
G> much of this one to this tricky yet interesting subject.

Today we have more books about ORM, even if you narrow it to Java world. Irony of my book
is that I actually step back from many ORM concepts and go back to SQL roots to some degree.
That does not change the fact that Fowler's work organizing and describing all these (still
applicable) patterns is remarkable.


## Structure of the book

I aim for something not very long for the first edition, but I want to split it into couple of
parts anyway.

In the [first part](#part-jpa-good-bad) of the book we'll quickly go through JPA highs and lows
(all highly subjective, you know the disclaimer drill) without digging deep. If you're familiar
with JPA you may even skip it if you're just skimming this book whether it's even worth reading.
Go straight to the second part to make your decision whether to read on or stop right away. In
any case, this part is just a really short background for any further arguments.

That's what the [second part](#part-opinionated-jpa) of the book is for. First I'll make my case
for the whole opinionated part of the book. Then we'll meet Querydsl before diving into other
problems, because I'm not willing to go on without it. And in the rest of this part I'll
demonstrate how I work around the features I marked as questionable.

Finally, [appendices](#appendices) will provide short references for related technologies I used
throughout the book (e.g. H2 database).


## My writing background

Once I wrote a book. I was 17 or so and it wasn't a technical book. And it was very short, I admit.
But I managed to finish it and I'm really proud of that, because it is something I am not able to
repeat consistently. I wanted to write a book about my simple monitoring library for Java called
[Java Simon](https://github.com/virgo47/javasimon), because books are often easier to
read than manuals or Javadoc... but you can guess I haven't finished it up.

With 50% success rate (0% for Java related books) I'll try my luck again. This time about JPA
which is the standard API for ORM in the Java world with implementations (also called *JPA
providers*) like [Hibernate](https://en.wikipedia.org/wiki/Hibernate_%28framework%29) or
[EclipseLink](https://en.wikipedia.org/wiki/EclipseLink).

On the bright side -- I wrote more than a few posts on [my blog](http://virgo47.wordpress.com/),
mostly on technical topics, couple of them about JPA. Actually, this book is based on these
frustrated experiences. I always felt like a writer -- originally just to share although not
everything is worth sharing, I know. Later I realized that writing helps me to clarify a lot of
concepts to myself. For the same reasons (sharing and learning) I gave courses and talks. Preparing
those is also kind of writing. So I hope both me and this book are not lost causes.


## Feedback

When you work on a technical book alone it may happen that some information are not exactly right.
Some might even be plain wrong. Obviously, it is not an intention -- on the contrary, I try hard
to avoid any confusion or leading anyone into a mistake. However, it may happen because the topic
is not simple. I study books and online resources, I test my solutions, I try to understand what
is going on, but sometimes I may just understand something wrong. Sorry for that and please,
if you know better, let me know.

* Either add an issue on the GitHub repo for the book: https://github.com/virgo47/opinionatedjpawithquerydsl
* Or just [email me](mailto:virgo47@gmail.com) directly.

Obviously, factual errors are probably most crucial, but other suggestions are welcome too.