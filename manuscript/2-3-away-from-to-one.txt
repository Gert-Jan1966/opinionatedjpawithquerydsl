# Moving away from *to-one* relationships {#ch-away-from-to-one}

Now we can get back to the topics I foreshadowed in the introduction to this opinionated part.
We will show an example of `@ManyToOne` mapping and we will analyze our options how to load
an entity with such a relationship when we are not interested in this relation.

## Simple example

We will continue experimenting on dogs in the demonstration of to-one mapping. The code is
available in a GitHub sub-project [many-to-one-eager](https://github.com/virgo47/opinionatedjpawithquerydsl/tree/master/examples/many-to-one-eager)
but as it is our first serious experiment we will include most of it in the text as well.

Our model is simple, but there is a twist to it. We have a `Dog` and `Breed` entities where a `Dog`
points to its `Breed` -- and to make things just a little bit tricky the `Breed` is a hierarchy
where each `Breed` points to its parent via attribute called `derivedFrom`.

![Class diagram of our entity model](images/many-to-one-example.png)

http://stackoverflow.com/questions/18746259/lazy-loading-does-not-works-for-manytoone-in-eclipselink
http://stackoverflow.com/questions/9400930/using-ecliplselink-jpa-how-can-i-disable-all-the-relationship-lookups-when-persi

options for avoiding eager fetch:
- state all the columns except for relations (tedious)
- black byte-code magic, not ensured by the JPA standard
