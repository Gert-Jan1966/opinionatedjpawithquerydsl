# Moving away from *to-one* relationships {#ch-away-from-to-one}

Now we can get back to the topics I foreshadowed in the introduction to this opinionated part.
We will show an example of `@ManyToOne` mapping and we will analyze our options how to load
an entity with such a relationship when we are not interested in this relation.

## Simple example of `@ManyToOne`

We will continue experimenting on dogs in the demonstration of to-one mapping. The code is
available in a GitHub sub-project [many-to-one-eager](https://github.com/virgo47/opinionatedjpawithquerydsl/tree/master/examples/many-to-one-eager).
This particular demo project is also referenced in appendix [Project example](#app-project-example)
where particulars of build files and `persistence.xml` are described. We will skip these but
because this is our first serious experiment in the book we will still include more of the code
listing to establish kind of a baseline.

Our model is simple, but there is a twist to it. We have a `Dog` and `Breed` entities where a `Dog`
points to its `Breed` -- and to make things just a little bit tricky the `Breed` is a hierarchy
where each `Breed` points to its parent via attribute called `derivedFrom`.

![Class diagram of our entity model](images/many-to-one-example.png)

Our entities are quite plain - `Dog` looks like this:

{lang="java", crop-end-line=15}
<<[Dog.java](../examples/many-to-one-eager/src/main/java/modeltoone/Dog.java)

The rest are getters/setters -- complete code is [here](https://github.com/virgo47/opinionatedjpawithquerydsl/blob/master/examples/many-to-one-eager/src/main/java/modeltoone/Dog.java).
Referenced `Breed` is mapped like this ([full source code](https://github.com/virgo47/opinionatedjpawithquerydsl/blob/master/examples/many-to-one-eager/src/main/java/modeltoone/Breed.java)):

{lang="java", crop-end-line=15}
<<[Breed.java](../examples/many-to-one-eager/src/main/java/modeltoone/Breed.java)

There is nothing special on these entities, but let's see what happens when we load some dog. In
the process we will also compare Hibernate and EclipseLink, that's why we have two nearly
equivalent persistence units in our [persistence.xml](https://github.com/virgo47/opinionatedjpawithquerydsl/blob/master/examples/many-to-one-eager/src/main/resources/META-INF/persistence.xml).
We will prepare data like this:

{title="Preparing a dog", lang=java}
~~~
EntityManagerFactory emf = Persistence
  .createEntityManagerFactory(persistenceUnitName);
try {
  EntityManager em = emf.createEntityManager();
  em.getTransaction().begin();

  Breed wolf = new Breed();
  wolf.setName("wolf");
  em.persist(wolf);

  Breed germanShepherd = new Breed();
  germanShepherd.setName("german shepherd");
  germanShepherd.setDerivedFrom(wolf);
  em.persist(germanShepherd);

  Breed collie = new Breed();
  collie.setName("collie");
  collie.setDerivedFrom(germanShepherd);
  em.persist(collie);

  Dog lassie = new Dog();
  lassie.setName("Lassie");
  lassie.setBreed(collie);
  em.persist(lassie);

  em.getTransaction().commit();
  em.clear();
  emf.getCache().evictAll();

  // here comes "demo" code
} finally {
  emf.close();
}
~~~

Sorry for copy/pasting, eventually the breed and dog creation would end up in separate methods,
but for our demo this code will do. Also the breed tree is probably far from reality, but that's
not the point. Let's say that collie was bred from shepherd which descends from wolf.

Notice the clearing of the entity manager, alternatively we could close and reopen one. Another
thing is we are clearing up the second-level cache as well. We may argue what the real case is,
but unless you have all your entities cached all the time an empty cache simulates real-life
scenario. And we're just finding the dog by its ID -- we know it's 1:

{title="Finding a dog", lang=java}
~~~
Dog dog = em.find(Dog.class, 1);
~~~

What happens at this line? Let's see the console for Hibernate:

{title="Hibernate find dog by id", lang=text}
~~~
Hibernate: select dog0_.id as id1_1_0_, dog0_.breed_id as breed_id3_1_0_, dog0_.name as name2_1_0_, breed1_.id as id1_0_1_, breed1_.derivedFrom_id as derivedF3_0_1_, breed1_.name as name2_0_1_, breed2_.id as id1_0_2_, breed2_.derivedFrom_id as derivedF3_0_2_, breed2_.name as name2_0_2_ from Dog dog0_ left outer join Breed breed1_ on dog0_.breed_id=breed1_.id left outer join Breed breed2_ on breed1_.derivedFrom_id=breed2_.id where dog0_.id=?
Hibernate: select breed0_.id as id1_0_0_, breed0_.derivedFrom_id as derivedF3_0_0_, breed0_.name as name2_0_0_, breed1_.id as id1_0_1_, breed1_.derivedFrom_id as derivedF3_0_1_, breed1_.name as name2_0_1_ from Breed breed0_ left outer join Breed breed1_ on breed0_.derivedFrom_id=breed1_.id where breed0_.id=?
~~~

Two selects that load a dog and all three breeds -- not that bad. If you know traverse up the breed
tree, there would be no more select. On the other hand, if you cared about the actual breed of this
dog and not about what this breed is derived from we fetched those unnecessarily. There is no way
to tell the JPA that dummy breed with shepherd's ID would do on the collie entity and that you
don't want this to-one relationship fetching to propagate any further.

Let's look at EclipseLink now:

{title="EclipseLink find dog by id", lang=text}
~~~
[EL Fine]: sql: 2016-03-22 18:08:19.28--ServerSession(12313413)--Connection(13918250)--Thread(Thread[main,5,main])--SELECT ID, NAME, BREED_ID FROM DOG WHERE (ID = ?)
	bind => [1]
[EL Fine]: sql: 2016-03-22 18:08:19.281--ServerSession(12313413)--Connection(13918250)--Thread(Thread[main,5,main])--SELECT ID, NAME, DERIVEDFROM_ID FROM BREED WHERE (ID = ?)
	bind => [3]
[EL Fine]: sql: 2016-03-22 18:08:19.282--ServerSession(12313413)--Connection(13918250)--Thread(Thread[main,5,main])--SELECT ID, NAME, DERIVEDFROM_ID FROM BREED WHERE (ID = ?)
	bind => [2]
[EL Fine]: sql: 2016-03-22 18:08:19.282--ServerSession(12313413)--Connection(13918250)--Thread(Thread[main,5,main])--SELECT ID, NAME, DERIVEDFROM_ID FROM BREED WHERE (ID = ?)
	bind => [1]
~~~

This is as obvious as it gets. Each entity is loaded with a separate query. Effect is the same
like with Hibernate, EclipseLink just needs more round-trips to the database. Personally I don't
care how many selects it takes in the end as this is part of the JPA provider strategy. We are not
going to fine-tune Hibernate or EclipseLink. We're going to cut off this loading chain.

## How about going lazy?

Let's be a bit naive (I was!) and mark the relationships as lazy:

{title="Marking relationships lazy", lang=java}
~~~
@ManyToOne(fetch = FetchType.LAZY)
private Breed breed;
~~~

And the same for `Breed.derivedFrom`. Our testing code is like this:

{title="Testing code", lang=java}
~~~
System.out.println("\nfind");
Dog dog = em.find(Dog.class, 1);
System.out.println("\ntraversing");
Breed breed = dog.getBreed();
while (breed.getDerivedFrom() != null) {
  breed = breed.getDerivedFrom();
}
System.out.println("breed = " + breed.getName());
~~~

This way we should see what selects are executed when. Hibernate out of the box works as expected:

{title="Hibernate lazy find and traversing", lang=text}
~~~
find
Hibernate: select dog0_.id as id1_1_0_, dog0_.breed_id as breed_id3_1_0_, dog0_.name as name2_1_0_ from Dog dog0_ where dog0_.id=?

traversing
Hibernate: select breed0_.id as id1_0_0_, breed0_.derivedFrom_id as derivedF3_0_0_, breed0_.name as name2_0_0_ from Breed breed0_ where breed0_.id=?
Hibernate: select breed0_.id as id1_0_0_, breed0_.derivedFrom_id as derivedF3_0_0_, breed0_.name as name2_0_0_ from Breed breed0_ where breed0_.id=?
Hibernate: select breed0_.id as id1_0_0_, breed0_.derivedFrom_id as derivedF3_0_0_, breed0_.name as name2_0_0_ from Breed breed0_ where breed0_.id=?
breed = wolf
~~~

Selects are executed as needed (lazily). For long-term Hibernate users this often gives an
impression that it should work like this. Let's migrate to EclipseLink then:

{title="EclipseLink lazy find and traversing", lang=text}
~~~
find
[EL Fine]: sql: 2016-03-23 14:45:29.349--ServerSession(12313413)--Connection(13918250)--Thread(Thread[main,5,main])--SELECT ID, NAME, BREED_ID FROM DOG WHERE (ID = ?)
	bind => [1]
[EL Fine]: sql: 2016-03-23 14:45:29.35--ServerSession(12313413)--Connection(13918250)--Thread(Thread[main,5,main])--SELECT ID, NAME, DERIVEDFROM_ID FROM BREED WHERE (ID = ?)
	bind => [3]
[EL Fine]: sql: 2016-03-23 14:45:29.35--ServerSession(12313413)--Connection(13918250)--Thread(Thread[main,5,main])--SELECT ID, NAME, DERIVEDFROM_ID FROM BREED WHERE (ID = ?)
	bind => [2]
[EL Fine]: sql: 2016-03-23 14:45:29.35--ServerSession(12313413)--Connection(13918250)--Thread(Thread[main,5,main])--SELECT ID, NAME, DERIVEDFROM_ID FROM BREED WHERE (ID = ?)
	bind => [1]

traversing
breed = wolf
~~~

Just like before EclipseLink generates four selects and executes them all right away when you
find the entity. How is this possible? Firstly, from the [[JPspec](#bib-jpspec)] perspective (page
25):

Q> If property access is used and lazy fetching is specified, portable applications should not
Q> directly access the entity state underlying the property methods of managed instances until
Q> after it has been fetched by the persistence provider.[4]
Q>
Q> [4] Lazy fetching is a hint to the persistence provider and can be specified by means of the
Q> `Basic`, `OneToOne`, `OneToMany`, `ManyToOne`, `ManyToMany`, and `ElementCollection` annotations
Q> and their XML equivalents...

Footnote [4] is important here, obviously. So "it should" but it's just "a hint".

### How bulletproof is Hibernate's solution?

Pretty much bulletproof, I have to say. As presented here, we annotated fields, which means we
implied `Access(FIELD)`. Hibernate can't get away with just intercepting getters/setters, it has
to do better. Let's try a bit of reflection:

{title="Reading breed with reflection", lang=java}
~~~
System.out.println("\nfind");
Dog dog = em.find(Dog.class, 1);
System.out.println("\nhacking");
Field breedField = dog.getClass().getDeclaredField("breed");
System.out.println(breedField.getType());
breedField.setAccessible(true);
Object val = breedField.get(dog);
System.out.println("val = " + val);
~~~

And now the console output mixed with logs:

{title="Hibernate output for reflection access", lang=text}
~~~
find
Hibernate: select dog0_.id as id1_1_0_, dog0_.breed_id as breed_id3_1_0_, dog0_.name as name2_1_0_ from Dog dog0_ where dog0_.id=?

hacking
class modeltoone.Breed
Hibernate: select breed0_.id as id1_0_0_, breed0_.derivedFrom_id as derivedF3_0_0_, breed0_.name as name2_0_0_ from Breed breed0_ where breed0_.id=?
val = Breed{id=3, name='collie'}
~~~

This is perfectly lazy. The solution seems even magic when you think about it. Doing lazy
collection (`@OneToMany` or `@ManyToMany`) is not a problem, we would probably mess around a bit
but eventually we would create some collection implementation that does it right. The trick is we
have the actual entities wrapped in a collection that works as an intermediary. We don't need to
perform any bytecode voodoo on the entity class.

With to-one situation changes dramatically as you have no intermediary. It would be interesting
if JPA at least offered some wrapper to enforce lazy behavior when you really need it regardless
of the JPA provider, but that would give away you're using some ORM (like you don't know) and
even more voices would talk about that "leaking abstraction".

While my tests with Hibernate looked great, the results are not portable across JPA providers as
we saw. Also, I'd not bet that you'll get the same results because there's still a lot of questions
how to make Hibernate lazy for to-one relationships, many of them quite new. But let's discover
a solution that is no magic, that is explicit (you probably write a bit more code too) and that
works with any JPA provider (sans bugs, of course).


## Removing `@ManyToOne` altogether

W> This solution builds on JPA 2.1 capabilities as it requires usage of `ON` clause. Older JPA
W> will not support it.

TODO

http://stackoverflow.com/questions/18746259/lazy-loading-does-not-works-for-manytoone-in-eclipselink
http://stackoverflow.com/questions/9400930/using-ecliplselink-jpa-how-can-i-disable-all-the-relationship-lookups-when-persi

options for avoiding eager fetch:
- state all the columns except for relations (tedious)
- black bytecode magic, not ensured by the JPA standard
